name: Version Bump - Automatic Develop Branch Management

on:
  create:

env:
  FLUTTER_VERSION: '3.35.3'

jobs:
  # Automatic version bump when release branch is created
  bump-develop-version:
    if: github.event_name == 'create' && github.event.ref_type == 'branch' && startsWith(github.event.ref, 'release/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Check for existing version bump PRs
        id: check_prs
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Check if there's already a version bump PR open for develop
          EXISTING_PRS=$(gh pr list --base develop --state open --label "version-bump" --json number,title)

          if [ "$(echo "$EXISTING_PRS" | jq '. | length')" -gt 0 ]; then
            echo "‚ö†Ô∏è Found existing version bump PR(s):"
            echo "$EXISTING_PRS" | jq -r '.[] | "#\(.number): \(.title)"'
            echo "skip_bump=true" >> $GITHUB_OUTPUT
            echo "Skipping version bump to avoid conflicts"
          else
            echo "‚úÖ No existing version bump PRs found"
            echo "skip_bump=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git
        if: steps.check_prs.outputs.skip_bump == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate next development version
        if: steps.check_prs.outputs.skip_bump == 'false'
        id: next_version
        run: |
          RELEASE_BRANCH="${{ github.event.ref }}"
          CURRENT_VERSION=$(echo $RELEASE_BRANCH | sed 's/release\///')

          # Ensure version starts with 'v'
          if [[ ! $CURRENT_VERSION == v* ]]; then
            CURRENT_VERSION="v$CURRENT_VERSION"
          fi

          # Parse version components
          CLEAN_CURRENT=$(echo $CURRENT_VERSION | sed 's/^v//')
          MAJOR=$(echo $CLEAN_CURRENT | cut -d. -f1)
          MINOR=$(echo $CLEAN_CURRENT | cut -d. -f2)
          PATCH=$(echo $CLEAN_CURRENT | cut -d. -f3)

          # Calculate next minor version for development
          NEXT_MINOR=$((MINOR + 1))
          NEXT_VERSION="v$MAJOR.$NEXT_MINOR.0"
          CLEAN_NEXT_VERSION="$MAJOR.$NEXT_MINOR.0"

          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "clean_next_version=$CLEAN_NEXT_VERSION" >> $GITHUB_OUTPUT

          echo "Current release: $CURRENT_VERSION"
          echo "Next development version: $NEXT_VERSION"

      - name: Check current develop version
        if: steps.check_prs.outputs.skip_bump == 'false'
        id: current_dev_version
        run: |
          # Get current version from pubspec.yaml
          CURRENT_DEV_VERSION=""

          if [ -f "pubspec.yaml" ]; then
            CURRENT_DEV_VERSION=$(grep "^version:" pubspec.yaml | awk '{print $2}' | cut -d'+' -f1)
          else
            CURRENT_DEV_VERSION="0.0.0"
          fi

          NEXT_VERSION="${{ steps.next_version.outputs.clean_next_version }}"

          echo "current_dev_version=$CURRENT_DEV_VERSION" >> $GITHUB_OUTPUT

          # Check if develop already has a higher or equal version
          if [ "$(printf '%s\n' "$CURRENT_DEV_VERSION" "$NEXT_VERSION" | sort -V | tail -n1)" = "$CURRENT_DEV_VERSION" ]; then
            if [ "$CURRENT_DEV_VERSION" = "$NEXT_VERSION" ]; then
              echo "‚ö†Ô∏è Develop already has the target version: $CURRENT_DEV_VERSION"
            else
              echo "‚ö†Ô∏è Develop already has a higher version: $CURRENT_DEV_VERSION > $NEXT_VERSION"
            fi
            echo "skip_update=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Will update from $CURRENT_DEV_VERSION to $NEXT_VERSION"
            echo "skip_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Flutter
        if: steps.check_prs.outputs.skip_bump == 'false' && steps.current_dev_version.outputs.skip_update == 'false'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Update develop branch with next version
        if: steps.check_prs.outputs.skip_bump == 'false' && steps.current_dev_version.outputs.skip_update == 'false'
        run: |
          CLEAN_VERSION="${{ steps.next_version.outputs.clean_next_version }}"
          echo "üìù Updating develop branch to $CLEAN_VERSION..."

          # Update version in pubspec.yaml
          sed -i.bak "s/^version: .*/version: $CLEAN_VERSION/" pubspec.yaml
          echo "‚úÖ Updated version in pubspec.yaml"

          # Update example app if it exists
          if [ -f "example/pubspec.yaml" ]; then
            sed -i.bak "s/^version: .*/version: $CLEAN_VERSION/" example/pubspec.yaml
            echo "‚úÖ Updated example app version"
          fi

          # Update version references in library files
          find lib -name "*.dart" -exec grep -l "version.*=.*['\"][0-9]\+\.[0-9]\+\.[0-9]\+['\"]" {} \; | while read file; do
            echo "Updating version in $file..."
            sed -i "s/version.*=.*['\"][0-9]\+\.[0-9]\+\.[0-9]\+['\"]/version = '$CLEAN_VERSION'/g" "$file"
          done

          # Update README.md version references
          if [ -f "README.md" ]; then
            echo "üìù Updating README.md version references..."
            sed -i "s/form_gear_engine_sdk: \^[0-9]\+\.[0-9]\+\.[0-9]\+/form_gear_engine_sdk: ^$CLEAN_VERSION/g" README.md
            sed -i "s/version: [0-9]\+\.[0-9]\+\.[0-9]\+/version: $CLEAN_VERSION/g" README.md
          fi

          # Validate Flutter project
          echo "üîç Validating Flutter project..."
          flutter pub get
          flutter analyze lib/ || echo "‚ö†Ô∏è Analysis warnings found"

          echo "‚úÖ Version update completed"

      - name: Create required labels if they don't exist
        if: steps.check_prs.outputs.skip_bump == 'false' && steps.current_dev_version.outputs.skip_update == 'false'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üè∑Ô∏è Ensuring required labels exist for version bump PR..."

          # Create labels if they don't exist
          gh label create "chore" --description "Maintenance and chore tasks" --color "0e8a16" || echo "Label 'chore' already exists"
          gh label create "auto-generated" --description "Automatically generated by GitHub Actions" --color "bfdadc" || echo "Label 'auto-generated' already exists"
          gh label create "version-bump" --description "Version bump changes" --color "0052cc" || echo "Label 'version-bump' already exists"

          echo "‚úÖ Label creation completed"

      - name: Create version bump PR
        if: steps.check_prs.outputs.skip_bump == 'false' && steps.current_dev_version.outputs.skip_update == 'false'
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          RELEASE_VERSION="${{ steps.next_version.outputs.current_version }}"
          NEXT_VERSION="${{ steps.next_version.outputs.next_version }}"
          CLEAN_VERSION="${{ steps.next_version.outputs.clean_next_version }}"

          # Create PR branch with timestamp to ensure uniqueness
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BASE_PR_BRANCH="chore/bump-version-to-$NEXT_VERSION-dev"

          if git ls-remote --heads origin "$BASE_PR_BRANCH" | grep -q "$BASE_PR_BRANCH"; then
            PR_BRANCH="${BASE_PR_BRANCH}-${TIMESTAMP}"
            echo "‚ö†Ô∏è Base branch exists, using unique name: $PR_BRANCH"
          else
            PR_BRANCH="$BASE_PR_BRANCH"
            echo "‚úÖ Using base branch name: $PR_BRANCH"
          fi

          git checkout -b "$PR_BRANCH"

          # Add and commit changes
          git add .
          git commit -m "chore: bump version to $NEXT_VERSION for next development cycle" \
                     -m "" \
                     -m "Following release branch creation for $RELEASE_VERSION, updating develop" \
                     -m "branch to target the next minor version $NEXT_VERSION." \
                     -m "" \
                     -m "Changes:" \
                     -m "- Update pubspec.yaml version to $CLEAN_VERSION" \
                     -m "- Update example app version (if present)" \
                     -m "- Update version constants in library files" \
                     -m "- Update README.md version examples" \
                     -m "- Validated Flutter project integrity" \
                     -m "" \
                     -m "This maintains the Git Flow pattern where develop always contains" \
                     -m "the next planned version."

          # Push PR branch
          git push origin "$PR_BRANCH"

          # Create PR body
          PR_BODY="## Summary
          Automatic version bump following release branch creation.

          ## Details
          - **Release Branch Created**: \`${{ github.event.ref }}\`
          - **Release Version**: $RELEASE_VERSION
          - **Next Development Version**: $NEXT_VERSION

          ## üìù Changes Made
          - Updated version in pubspec.yaml to $CLEAN_VERSION
          - Updated example app version (if present)
          - Updated version constants in library files
          - Updated README.md version references and examples
          - Validated Flutter project with pub get and analysis

          ## üì± Flutter Package Details
          - **Package Version**: $CLEAN_VERSION
          - **Flutter SDK**: ${{ env.FLUTTER_VERSION }}+
          - **Development Status**: Next minor version prepared

          ## üîÑ Git Flow Pattern
          This maintains the Git Flow pattern where:
          - \`develop\` always contains the next planned version
          - Release branches contain the current release version
          - After release cutoff, develop moves to next minor version

          ## Auto-generated
          This PR was automatically created when the release branch was created.

          **Safe to merge** - contains only version bumps and validation."

          # Create pull request
          gh pr create \
            --base develop \
            --head "$PR_BRANCH" \
            --title "chore: bump version to $NEXT_VERSION for next development cycle" \
            --body "$PR_BODY" \
            --label "chore" \
            --label "auto-generated" \
            --label "version-bump"

      - name: Create version bump summary
        if: always()
        run: |
          echo "## üîÑ Version Bump Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release Branch**: \`${{ github.event.ref }}\`" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.check_prs.outputs.skip_bump }}" == "true" ]]; then
            echo "**Status**: ‚ö†Ô∏è Skipped - existing version bump PR found" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.current_dev_version.outputs.skip_update }}" == "true" ]]; then
            echo "**Status**: ‚ö†Ô∏è Skipped - develop already has target or higher version" >> $GITHUB_STEP_SUMMARY
            echo "**Current Version**: ${{ steps.current_dev_version.outputs.current_dev_version }}" >> $GITHUB_STEP_SUMMARY
          else
            RELEASE_VERSION="${{ steps.next_version.outputs.current_version }}"
            NEXT_VERSION="${{ steps.next_version.outputs.next_version }}"
            echo "**Release Version**: $RELEASE_VERSION" >> $GITHUB_STEP_SUMMARY
            echo "**Next Dev Version**: $NEXT_VERSION" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚úÖ Actions Completed" >> $GITHUB_STEP_SUMMARY
            echo "- üéØ Calculated next minor version: $NEXT_VERSION" >> $GITHUB_STEP_SUMMARY
            echo "- üìù Updated Flutter package versions" >> $GITHUB_STEP_SUMMARY
            echo "- üìñ Updated documentation examples" >> $GITHUB_STEP_SUMMARY
            echo "- üîç Validated Flutter project integrity" >> $GITHUB_STEP_SUMMARY
            echo "- üîÑ Created PR to merge version bump" >> $GITHUB_STEP_SUMMARY
          fi
          