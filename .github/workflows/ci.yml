name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  FLUTTER_VERSION: '3.35.3'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      dart-changed: ${{ steps.changes.outputs.dart-changed }}
      example-changed: ${{ steps.changes.outputs.example-changed }}
      test-changed: ${{ steps.changes.outputs.test-changed }}
      core-changed: ${{ steps.changes.outputs.core-changed }}
      config-changed: ${{ steps.changes.outputs.config-changed }}
      test-summary: ${{ steps.changes.outputs.test-summary }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes and build strategy
      id: changes
      run: |
        # Determine base commit for comparison
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE_COMMIT="${{ github.event.pull_request.base.sha }}"
        else
          BASE_COMMIT="${{ github.event.before }}"
        fi

        # Get changed files
        CHANGED_FILES=$(git diff --name-only $BASE_COMMIT..HEAD)
        echo "Changed files:"
        echo "$CHANGED_FILES"

        # Initialize flags
        DART_CHANGED="false"
        EXAMPLE_CHANGED="false"
        TEST_CHANGED="false"
        CORE_CHANGED="false"
        CONFIG_CHANGED="false"

        # Detect changes by file patterns
        if echo "$CHANGED_FILES" | grep -q '\.dart$'; then
          DART_CHANGED="true"
        fi

        if echo "$CHANGED_FILES" | grep -q '^example/'; then
          EXAMPLE_CHANGED="true"
        fi

        if echo "$CHANGED_FILES" | grep -q '^test/.*\.dart$'; then
          TEST_CHANGED="true"
        fi

        # Core SDK files that require comprehensive testing
        if echo "$CHANGED_FILES" | grep -q '^lib/src/\(services\|security\|config\)/'; then
          CORE_CHANGED="true"
        fi

        # Config files that require full rebuild
        if echo "$CHANGED_FILES" | grep -q '\(pubspec\.yaml\|analysis_options\.yaml\|\.github/workflows/\)'; then
          CONFIG_CHANGED="true"
        fi

        # Build test summary
        if [ "$CONFIG_CHANGED" = "true" ]; then
          TEST_SUMMARY="🔄 Full suite (config changes detected)"
        elif [ "$CORE_CHANGED" = "true" ]; then
          TEST_SUMMARY="🧪 Core SDK testing (critical components changed)"
        elif [ "$DART_CHANGED" = "true" ]; then
          TEST_SUMMARY="🎯 Selective testing (Dart code changes)"
        else
          TEST_SUMMARY="✅ No code changes - minimal checks"
        fi

        # Set outputs
        echo "dart-changed=$DART_CHANGED" >> $GITHUB_OUTPUT
        echo "example-changed=$EXAMPLE_CHANGED" >> $GITHUB_OUTPUT
        echo "test-changed=$TEST_CHANGED" >> $GITHUB_OUTPUT
        echo "core-changed=$CORE_CHANGED" >> $GITHUB_OUTPUT
        echo "config-changed=$CONFIG_CHANGED" >> $GITHUB_OUTPUT
        echo "test-summary=$TEST_SUMMARY" >> $GITHUB_OUTPUT

        echo "Change detection results:"
        echo "  Dart changed: $DART_CHANGED"
        echo "  Example changed: $EXAMPLE_CHANGED"
        echo "  Tests changed: $TEST_CHANGED"
        echo "  Core changed: $CORE_CHANGED"
        echo "  Config changed: $CONFIG_CHANGED"
        echo "  Strategy: $TEST_SUMMARY"

  analyze:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.dart-changed == 'true' || needs.detect-changes.outputs.config-changed == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Run static analysis on SDK
      run: |
        echo "🔍 ${{ needs.detect-changes.outputs.test-summary }}"
        echo "Running static analysis on SDK..."
        flutter analyze lib/

    - name: Check code formatting
      run: |
        echo "🎨 Checking Dart code formatting..."
        if ! dart format --output=none --set-exit-if-changed lib/; then
          echo "❌ Code formatting issues found"
          echo "Run 'dart format lib/' to fix formatting"
          exit 1
        fi

    - name: Analyze example app
      if: needs.detect-changes.outputs.example-changed == 'true'
      run: |
        echo "🔍 Analyzing example app..."
        cd example
        flutter pub get
        flutter analyze

  test:
    runs-on: ubuntu-latest
    needs: [detect-changes, analyze]
    if: always() && (needs.detect-changes.outputs.dart-changed == 'true' || needs.detect-changes.outputs.test-changed == 'true' || needs.detect-changes.outputs.config-changed == 'true')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Run unit tests
      run: |
        echo "🧪 ${{ needs.detect-changes.outputs.test-summary }}"

        # Check if test files exist
        TEST_COUNT=$(find test -name '*_test.dart' 2>/dev/null | wc -l)

        if [ "$TEST_COUNT" -gt 0 ]; then
          echo "Found $TEST_COUNT test files. Running tests with coverage..."

          # Run tests with coverage only if needed
          if [ "${{ needs.detect-changes.outputs.core-changed }}" = "true" ] || [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Running with coverage..."
            flutter test --coverage --reporter=expanded
          else
            echo "Running without coverage (no core changes)..."
            flutter test --reporter=expanded
          fi

          if [ -f "coverage/lcov.info" ]; then
            echo "✅ Tests completed with coverage"
          else
            echo "✅ Tests completed"
          fi
        else
          echo "⚠️ No test files found"
        fi

    - name: Generate coverage report
      if: always()
      run: |
        echo "## 📊 Test Results" > test_report.md
        echo "" >> test_report.md
        echo "${{ needs.detect-changes.outputs.test-summary }}" >> test_report.md
        echo "" >> test_report.md

        if [ -f "coverage/lcov.info" ] && [ -s "coverage/lcov.info" ]; then
          # Fast coverage calculation without external tools
          echo "📊 Calculating coverage from lcov.info..."

          # Count total and hit lines using simple grep (much faster than lcov)
          TOTAL_LINES=$(grep -c "^LF:" coverage/lcov.info 2>/dev/null || echo "0")
          HIT_LINES=$(grep -c "^LH:" coverage/lcov.info 2>/dev/null || echo "0")

          if [ "$TOTAL_LINES" -gt 0 ]; then
            COVERAGE_PERCENT=$(awk "BEGIN {printf \"%.1f\", ($HIT_LINES/$TOTAL_LINES)*100}")
            TOTAL_COVERAGE="${COVERAGE_PERCENT}%"
          else
            TOTAL_COVERAGE="0%"
          fi

          echo "### 🎯 Coverage: ${TOTAL_COVERAGE}" >> test_report.md
          echo "" >> test_report.md
          echo "| Component | Status |" >> test_report.md
          echo "|-----------|--------|" >> test_report.md
          echo "| Unit Tests | ✅ Passed |" >> test_report.md
          echo "| Coverage | ${TOTAL_COVERAGE} |" >> test_report.md

          if [ "${{ needs.detect-changes.outputs.core-changed }}" = "true" ]; then
            echo "| Core Components | 🧪 Tested |" >> test_report.md
          fi
        else
          echo "### ⚠️ No Coverage Data" >> test_report.md
          echo "Tests may not exist or failed to generate coverage." >> test_report.md
        fi

    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          let report = '';

          try {
            report = fs.readFileSync('test_report.md', 'utf8');
          } catch (error) {
            report = '## 📊 Test Results\n\nTests completed successfully.';
          }

          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.data.find(comment =>
            comment.user.type === 'Bot' && comment.body.includes('📊 Test Results')
          );

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: report
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
          }


  ci-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, analyze, test]
    if: always()

    steps:
    - name: Generate CI summary
      run: |
        echo "## 🎯 CI Summary" > summary.md
        echo "" >> summary.md
        echo "${{ needs.detect-changes.outputs.test-summary }}" >> summary.md
        echo "" >> summary.md

        echo "| Check | Status |" >> summary.md
        echo "|-------|--------|" >> summary.md

        # Analysis
        if [ "${{ needs.analyze.result }}" = "success" ]; then
          echo "| 🔍 Analysis | ✅ Passed |" >> summary.md
        elif [ "${{ needs.analyze.result }}" = "skipped" ]; then
          echo "| 🔍 Analysis | ⏭️ Skipped |" >> summary.md
        else
          echo "| 🔍 Analysis | ❌ Failed |" >> summary.md
        fi

        # Tests
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "| 🧪 Tests | ✅ Passed |" >> summary.md
        elif [ "${{ needs.test.result }}" = "skipped" ]; then
          echo "| 🧪 Tests | ⏭️ Skipped |" >> summary.md
        else
          echo "| 🧪 Tests | ❌ Failed |" >> summary.md
        fi

        echo "" >> summary.md

        # Overall status
        if [ "${{ needs.analyze.result }}" != "failure" ] && \
           [ "${{ needs.test.result }}" != "failure" ]; then
          echo "### ✅ All checks passed!" >> summary.md
        else
          echo "### ❌ Some checks failed" >> summary.md
        fi

    - name: Comment PR with summary
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('summary.md', 'utf8');

          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.data.find(comment =>
            comment.user.type === 'Bot' && comment.body.includes('🎯 CI Summary')
          );

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: summary
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
          }